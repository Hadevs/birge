package main

import (
	"os"
	"log"
  "fmt"
  "strings"
  "strconv"

	tb "gopkg.in/tucnak/telebot.v2"

  // "database/sql"
  _ "github.com/lib/pq"
  "github.com/jmoiron/sqlx"
  "github.com/go-redis/redis/v7"
)

var schema = `
  CREATE TABLE IF NOT EXISTS SEworker(
    id SERIAL PRIMARY KEY,
    tid TEXT,
    approved BOOLEAN
  );

  CREATE TABLE IF NOT EXISTS SEproject(
    id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    description TEXT,
    difficulty INT,
    price INT,
    paid INT,
    progress INT,
    worker_id INT
  );
`

type SEworker struct {
  Id int `db:"id"`
  Tid string `db:"tid"`
  Approved bool `db:"approved"`
}

type SEproject struct {
  Id int `db:"id"`
  Name string `db:"name"`
  Description string `db:"description"`
  Difficulty int `db:"difficulty"`
  Price int `db:"price"`
  Paid int `db:"paid"`
  Progress int `db:"progress"`
  WorkerId int `db:"worker_id"`
}

func parsePsqlElements(url string) (string, string, string, string, string) {
  split := strings.Split(url, "@")
  unamepwdsplit := strings.Split(split[0], "//")
  unamepwd := strings.Split(unamepwdsplit[1], ":")
  uname := unamepwd[0]
  pwd := unamepwd[1]
  urlportdbname := strings.Split(split[1], ":")
  link := urlportdbname[0]
  portdbname := strings.Split(urlportdbname[1], "/")
  port := portdbname[0]
  dbname := portdbname[1]
  return uname, pwd, link, port, dbname
}
// redis://h:pce2cf2e8633a6107d63b9e1aed57cd5a6590af92578cada0f451abc279b13bf7@ec2-18-203-184-0.eu-west-1.compute.amazonaws.com:6549
func parseRedisElements(url string) (string, string, string) {
  split := strings.Split(url, "@")
  unamepwdsplit := strings.Split(split[0], "//")
  unamepwd := strings.Split(unamepwdsplit[1], ":")
  uname := unamepwd[0]
  pwd := unamepwd[1]
  link := split[1]
  return uname, pwd, link
}

func main() {
	var (
		port      = os.Getenv("PORT")       // sets automatically
		publicURL = os.Getenv("PUBLIC_URL") // you must add it to your config vars
		token     = os.Getenv("TOKEN")      // you must add it to your config vars
    redisURL  = os.Getenv("REDIS_URL")
    psqlURL   = os.Getenv("DATABASE_URL")
    dbuname, dbpwd, dblink, dbport, dbname = parsePsqlElements(psqlURL)
    psqlInfo  = fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s" +
    " sslmode=disable", dblink, dbport, dbuname, dbpwd, dbname)
    _, repwd, relink = parseRedisElements(redisURL)
    // Cuz I'm too lazy to do it the right way
    projectname  = ""
    projectdesc  = ""
    projectdiff  = 0
    projectprice = 0
    takeProjectStr = 1
	)

  fmt.Println(psqlInfo)

  db, err := sqlx.Connect("postgres", psqlInfo)
  if err != nil {
    log.Panic(err)
  }
  defer db.Close()
  db.MustExec(schema)

  client := redis.NewClient(&redis.Options{
		Addr:     relink,
		Password: repwd, // no password set
		DB:       0,  // use default DB
	})
  _, err = client.Ping().Result()
  if err != nil {
    log.Panic(err)
  }

	webhook := &tb.Webhook{
		Listen:   ":" + port,
		Endpoint: &tb.WebhookEndpoint{PublicURL: publicURL},
	}

	pref := tb.Settings{
		Token:  token,
		Poller: webhook,
	}

  // here are buttons defined

  backBtn := tb.InlineButton{
    Unique: "back",
    Text:   "‚Ü©Ô∏è –ù–∞–∑–∞–¥"}

  enterBtn := tb.InlineButton{
    Unique: "enter",
    Text:   "üîë –í–æ–π—Ç–∏ –Ω–∞ –±–∏—Ä–∂—É"}

  qualifyBtn := tb.InlineButton{
    Unique: "qualify",
    Text:   "üßß –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"}

  infoBtn := tb.InlineButton{
    Unique: "info",
    Text:   "üìÉ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏—Ä–∂–µ"}

  howToEnterBtn := tb.InlineButton{
    Unique: "howToEnter",
    Text:   "üóù –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –±–∏—Ä–∂—É?"}

  fuckedUpBtn := tb.InlineButton{
    Unique: "fuckedUp",
    Text:   "üìÜ –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —è –Ω–µ —É–ª–æ–∂—É—Å—å –≤ —Å—Ä–æ–∫?"}

  whatProjectsBtn := tb.InlineButton{
    Unique: "whatProjects",
    Text:   "üìë –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∏—Ä–∂–∞?"}

  // currentProjectBtn := tb.InlineButton{
  //   Unique: "currentProject",
  //   Text:   "üõé –ú–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç"}

  showOffersBtn := tb.InlineButton{
    Unique: "showOffers",
    Text:   "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}

  askAdminBtn := tb.InlineButton{
    Unique: "askAdmin",
    Text:   "üí° –í–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"}

  techSuppBtn := tb.InlineButton{
    Unique: "techSupp",
    Text:   "üì¶ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å"}

  redeemMilestoneProjectBtn := tb.InlineButton{
    Unique: "redeemMilestoneProject",
    Text:   "‚úÖ –ó–∞–∫—Ä—ã—Ç—å —ç—Ç–∞–ø/–ø—Ä–æ–µ–∫—Ç"}

  // cancelProjectBtn := tb.InlineButton{
  //   Unique: "cancelProject",
  //   Text:   "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞"}

	b, err := tb.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

  b.Handle("/whoami", func(m *tb.Message) {
    err := client.Set(fmt.Sprintf("%d", m.Sender.ID), "whoami", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(m.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }
    b.Send(m.Sender, fmt.Sprintf("%d", m.Sender.ID))
  })

  b.Handle("/start", func(m *tb.Message) {
    err := client.Set(fmt.Sprintf("%d", m.Sender.ID), "start", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(m.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }
    inlineKeys := [][]tb.InlineButton{
      []tb.InlineButton{enterBtn, qualifyBtn},
      []tb.InlineButton{infoBtn}}

    b.Send(
      m.Sender,
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Swift Exchange! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:",
      &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
  })

  b.Handle(&infoBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "info", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    b.Respond(c, &tb.CallbackResponse{
      ShowAlert: false,
    })

    inlineKeys := [][]tb.InlineButton{
      []tb.InlineButton{howToEnterBtn},
      []tb.InlineButton{fuckedUpBtn,whatProjectsBtn},
      []tb.InlineButton{backBtn}}

    b.Send(c.Sender, `üìÉ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏—Ä–∂–µ:

Swift Exchange - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

–ú—ã –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è:

üì© –ü–æ–ª–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
üíå –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å –≤ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ
üìÖ –ü–æ–¥–Ω—è—Ç–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞, –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
üìà –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤

–ë–∏—Ä–∂–∞ –∑–∞–±–∏—Ä–∞–µ—Ç 5% —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–∞–±–æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–º. –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ.`,
    &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
  })

  b.Handle(&enterBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "enter", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    inlineKeys := [][]tb.InlineButton{[]tb.InlineButton{showOffersBtn}}

    user := SEworker{}
    err = db.Get(&user, "SELECT * FROM SEworker WHERE tid=$1", c.Sender.ID)
    if err != nil || user.Approved != true {
      b.Send(c.Sender, `–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ "üßß –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"`)
      return
    }
    projects := []SEproject{}
    db.Select(&projects, "SELECT * FROM SEproject ORDER BY id DESC")
    b.Send(c.Sender, fmt.Sprintf(`üîë –í–æ–π—Ç–∏ –Ω–∞ –±–∏—Ä–∂—É:

–í—ã –≤–æ—à–ª–∏ –Ω–∞ Swift Exchange. –£ –≤–∞—Å —Å–µ–π—á–∞—Å %d –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º.`, len(projects)),
    &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
  })

  b.Handle(&howToEnterBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "howToEnter", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    inlineKeys := [][]tb.InlineButton{[]tb.InlineButton{backBtn}}

    b.Send(
      c.Sender,
      `üóù –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –±–∏—Ä–∂—É?:

–õ—é–±–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –±–∏—Ä–∂—É. –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ –∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∏—Ä–∂–∏ –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é. –ï—Å–ª–∏ –≤—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ, –≤—ã–ø–æ–ª–Ω—è–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –∏ –≤—ã –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –í—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø–∞–¥–µ—Ç–µ –Ω–∞ –±–∏—Ä–∂—É. –¢–∞–∫ –∂–µ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –¥–∞–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –í–∞—à–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏—è—Ö –≤ —Ä–∞–∑–º–µ—Ä–µ 350—Ä.`,
      &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
  })

  b.Handle(&whatProjectsBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "whatProjects", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    inlineKeys := [][]tb.InlineButton{[]tb.InlineButton{backBtn}}

    b.Send(
      c.Sender,
      `üìë –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∏—Ä–∂–∞?:

–ë–∏—Ä–∂–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ª—é–±—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —è–∑—ã–∫–æ–º Swift. –í –æ—Å–Ω–æ–≤–Ω–æ–º —ç—Ç–æ iOS/macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –¢–∞–∫ –∂–µ –±—É–¥—É—Ç –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

–¢–∞–∫ –∂–µ –ø—Ä–æ–µ–∫—Ç –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—â–µ–µ –æ–±–æ–∑—Ä–µ–Ω–∏–µ. –ú—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É, –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã—Å–æ–∫–æ–≥–æ. –ï—Å–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç - –º—ã –µ–≥–æ –ø–µ—Ä–µ–¥–∞–µ–º. –ï—Å–ª–∏ –Ω–µ—Ç - —Ç–æ –æ–±—Å—É–∂–¥–∞–µ–º –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –ø–æ–∫–∞ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ—Ç —Å–≤–æ–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.`,
      &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
  })

  b.Handle(&fuckedUpBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "fuckedUp", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    inlineKeys := [][]tb.InlineButton{[]tb.InlineButton{backBtn}}

    b.Send(
      c.Sender,
      `üìÜ –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —è –Ω–µ —É–ª–æ–∂—É—Å—å –≤ —Å—Ä–æ–∫?:

–ï—Å–ª–∏ –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ —Å–æ —Å–¥–∞—á–µ–π –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π - –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –∑–∞ —ç—Ç–æ –Ω–µ –±—É–¥–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —à—Ç—Ä–∞—Ñ–∞. –ï—Å–ª–∏ –∂–µ –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ –Ω–∞ –¥–Ω–µ–π 5 –∏–ª–∏ –±–æ–ª—å—à–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –∑–∞ 1 –Ω–µ–¥–µ–ª—é –¥–æ —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–¥–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ, —Ç–æ –í–∞–º —Ç–∞–∫ –∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≥—Ä–æ–∑–∏—Ç. –ü—Ä–æ—Å—Ç–æ —Å–Ω—è—Ç–∏–µ —Å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.

–í –∏–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –í–∞—Å –≤—ã–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂–µ.`,
      &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
  })

  b.Handle(&qualifyBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "qualify0", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    b.Send(
      c.Sender,
      `üßß –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:

–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ –Ω–∞—à–µ–π –±–∏—Ä–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ, —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø—Ä–æ–µ–∫—Ç–∞—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –≤ —Å–∞–º—ã–µ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ. –ë—É–¥–µ–º –∂–¥–∞—Ç—å! üòâ`)
  })

  b.Handle(&askAdminBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "askAdmin0", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    b.Send(
      c.Sender,
      `üí° –í–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:

–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å –∏ –æ–Ω –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞—Ç—å –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ó–∞–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞, –ø–æ–º–æ–≥–∏—Ç–µ." —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.`)
  })

  b.Handle(&techSuppBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "techSupp0", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    b.Send(
      c.Sender,
      `üì¶ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å:

–í—ã –¥–æ–ª–∂–Ω—ã –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ –ø—Ä–æ–µ–∫—Ç–µ, —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å. –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –í–∞–º –≤ —Å–∞–º—ã–π –∫—Ä–∞—Ç–∫–∏–π —Å—Ä–æ–∫.

–§–æ—Ä–º–∞—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:

1) –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
2) –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
3) –ü—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞, –∑–∞–ª–∏—Ç—ã–µ –Ω–∞ pastebin.com –∏–ª–∏ Github Gist, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –≤–∏–¥–µ–æ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∏–¥–Ω–æ –ø—Ä–æ–±–ª–µ–º—É`)
  })

  b.Handle(&redeemMilestoneProjectBtn, func(c *tb.Callback) {
    err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "redeemMilestoneProject0", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }

    b.Send(
      c.Sender,
      `‚úÖ –ó–∞–∫—Ä—ã—Ç—å —ç—Ç–∞–ø/–ø—Ä–æ–µ–∫—Ç:

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —ç—Ç–∞–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:

1) –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
2) –ù–æ–º–µ—Ä —ç—Ç–∞–ø–∞, –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç–µ —ç—Ç–∞–ø
3) hash-–Ω–æ–º–µ—Ä –∫–æ–º–º–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`)
  })

  b.Handle(&backBtn, func(c *tb.Callback) {
    v, err := client.Get(fmt.Sprintf("%d", c.Sender.ID)).Result()
    if err != nil {
      log.Print(err)
    }

    position := fmt.Sprintf("%s", v)
    switch position {
      case "info":
        err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "start", 0).Err()
        if err != nil {
          log.Print(err)
          b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
          return
        }
        inlineKeys := [][]tb.InlineButton{
          []tb.InlineButton{enterBtn, qualifyBtn},
          []tb.InlineButton{infoBtn}}
        b.Send(
          c.Sender,
          "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Swift Exchange! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:",
          &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
        return
      case "fuckedUp", "whatProjects", "howToEnter":
        err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "info", 0).Err()
        if err != nil {
          log.Print(err)
          b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
          return
        }
        inlineKeys := [][]tb.InlineButton{
          []tb.InlineButton{howToEnterBtn},
          []tb.InlineButton{fuckedUpBtn,whatProjectsBtn},
          []tb.InlineButton{backBtn}}

        b.Send(c.Sender, `üìÉ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏—Ä–∂–µ:

    Swift Exchange - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

    –ú—ã –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è:

    üì© –ü–æ–ª–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
    üíå –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å –≤ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ
    üìÖ –ü–æ–¥–Ω—è—Ç–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞, –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    üìà –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤

    –ë–∏—Ä–∂–∞ –∑–∞–±–∏—Ä–∞–µ—Ç 5% –æ—Ç —Å—É–º–º—ã —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–∞–±–æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–º. –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ.`,
        &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
        return
      default:
        err := client.Set(fmt.Sprintf("%d", c.Sender.ID), "start", 0).Err()
        if err != nil {
          log.Print(err)
          b.Send(c.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
          return
        }
        inlineKeys := [][]tb.InlineButton{
          []tb.InlineButton{enterBtn, qualifyBtn},
          []tb.InlineButton{infoBtn}}
        b.Send(
          c.Sender,
          "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Swift Exchange! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:",
          &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
        return
    }
  })

  b.Handle(&showOffersBtn, func(c *tb.Callback) {
    projects := []SEproject{}
    db.Select(&projects, "SELECT * FROM SEproject WHERE worker_id = 0 ORDER BY id DESC")
    for _, project := range projects {
      inlineKeys := [][]tb.InlineButton{
        []tb.InlineButton{tb.InlineButton{
          Unique: fmt.Sprintf("%d_%d", takeProjectStr, project.Id),
          Text:   "‚ùáÔ∏è –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç"}}}
      b.Send(
        c.Sender,
        fmt.Sprintf(`‚Äì %s
–ó–∞–¥–∞—á–∞: %s
–°–ª–æ–∂–Ω–æ—Å—Ç—å: %d/5 | –°—Ç–æ–∏–º–æ—Å—Ç—å: %d —Ä—É–±.
`, project.Name, project.Description, project.Difficulty, project.Price),
        &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
    }
    return
  })

  b.Handle(tb.OnCallback, func(c *tb.Callback) {
    pid := c.Data[len(c.Data) - 1:]
    split := strings.Split(c.Data, "_")
    fmt.Println(split[0], split[1])
    cmd, err := strconv.Atoi(split[0])
    fmt.Println(cmd, err)
    if err != nil {
      b.Send(
        c.Sender,
        "https://www.youtube.com/watch?v=l60MnDJklnM")
      return
    }
    if cmd == takeProjectStr {
      project := SEproject{}
      db.Select(&project, `SELECT * FROM SEproject WHERE id = $1`, pid)
      if project.WorkerId != 0 {
        b.Send(
          c.Sender,
          "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —É–∂–µ –∑–∞–Ω—è—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π")
        return
      }
      worker := SEworker{}
      db.Select(&worker, `SELECT * FROM SEworker WHERE tid = $1`, c.Sender.ID)
      tx := db.MustBegin()
      tx.MustExec(`UPDATE TABLE SEprojects SET worker_id = $1 WHERE id = $2`, worker.Id, pid)
      tx.Commit()
      b.Send(
        c.Sender,
        "–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –≤–∞—à, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π! –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
      admin := tb.User{73346375,"","","","",false}
      b.Send(
        &admin,
        fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–±—Ä–∞–ª –ø—Ä–æ–µ–∫—Ç, –ø–∏–∑–¥—É–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π —á–µ —Ç–∞–º –∫–∞–≤–æ", c.Sender.Username))
      return
    } else {
      b.Send(
        c.Sender,
        "https://www.youtube.com/watch?v=l60MnDJklnM")
    }
    return
  })

  b.Handle("/approve", func(m *tb.Message) {
    tx := db.MustBegin()
    tx.MustExec(`INSERT INTO SEworker(tid, approved) VALUES ($1, true)`, m.Payload)
    tx.Commit()
    b.Send(m.Sender, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∏–¥–µ—Ä–∞—Å—Ç, –¥–µ–Ω—å–≥–∏ –º–Ω–µ –ø–ª–∞—Ç–∏ –±–ª—è—Ç—å")
  })

  b.Handle("/project", func(m *tb.Message) {
    err := client.Set(fmt.Sprintf("%d", m.Sender.ID), "project0", 0).Err()
    if err != nil {
      log.Print(err)
      b.Send(m.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
      return
    }
    b.Send(m.Sender, "–ù—É —á–µ, —Ö—É–∏–ª–∞, –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞—à–µ–ª –¥–ª—è –ø–ª–µ–±–µ–µ–≤? –ù—É –∑–∞–ø–æ–ª–Ω—è–π –±–ª—è—Ç—å, –≥–∞–Ω–¥–æ–Ω. –î–µ–Ω—å–≥–∏ –º–Ω–µ –ø–ª–∞—Ç–∏ –±–ª—è—Ç—å")
  })

  b.Handle(tb.OnText, func(m *tb.Message) {
    v, err := client.Get(fmt.Sprintf("%d", m.Sender.ID)).Result()
    if err != nil {
      log.Print(err)
    }
    position := fmt.Sprintf("%s", v)
    if err != nil {
      log.Print(err)
      b.Send(m.Sender, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã! –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start")
      return
    }
    admin := tb.User{73346375,"","","","",false}
    switch position {
      case "qualify0":
        b.Send(&admin, fmt.Sprintf("%d", m.Sender.ID))
        b.Forward(&admin, m)
        b.Send(m.Sender, "–°–ø–∞—Å–∏–±–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞ –í–∞—à—É –∑–∞—è–≤–∫—É –∏ –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é /start")
        return
      case "askAdmin0":
        b.Forward(&admin, m)
        b.Send(m.Sender, "–°–ø–∞—Å–∏–±–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å –∏ –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é /start")
        return
      case "techSupp0":
        b.Forward(&admin, m)
        b.Send(m.Sender, "–°–ø–∞—Å–∏–±–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞ –í–∞—à –∑–∞–ø—Ä–æ—Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é /start")
        return
      case "redeemMilestoneProject0":
        b.Forward(&admin, m)
        b.Send(m.Sender, "–°–ø–∞—Å–∏–±–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞ –í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç–∏–µ —ç—Ç–∞–ø–∞/–ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é /start")
        return
      case "project0":
        projectname = m.Text
        err := client.Set(fmt.Sprintf("%d", m.Sender.ID), "project1", 0).Err()
        if err != nil {
          log.Print(err)
          b.Send(m.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
          return
        }
        b.Send(m.Sender, "–¢–µ–ø–µ—Ä—å –ø–∏—à–∏ –±–ª—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ —Å—Å–∞–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —Ö—É–∏–ª–∞. –î–µ–Ω—å–≥–∏ –º–Ω–µ –ø–ª–∞—Ç–∏ –±–ª—è—Ç—å")
        return
      case "project1":
        projectdesc = m.Text
        err := client.Set(fmt.Sprintf("%d", m.Sender.ID), "project2", 0).Err()
        if err != nil {
          log.Print(err)
          b.Send(m.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
          return
        }
        b.Send(m.Sender, "–¢–µ–ø–µ—Ä—å –ø–∏—à–∏ –±–ª—è—Ç—å –Ω–∞—Å–∫–æ–ª—å–∫–æ –∞—Ö—É–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Ç—ã —Ç–∞–º –ø—Ä–∏–¥—É–º–∞–ª (1-5). –î–µ–Ω—å–≥–∏ –º–Ω–µ –ø–ª–∞—Ç–∏ –±–ª—è—Ç—å")
      case "project2":
        projectdiff, err = strconv.Atoi(m.Text)
        if err != nil {
          b.Send(m.Sender, "–¢—ã –µ–±–∞–Ω—É—Ç—ã–π –±–ª—è—Ç—å? –ü–∏—à–∏ —Ü–∏—Ñ—Ä—ã –±–ª—è—Ç—å, –¶–ò–§–†–´ –°–£–ö–ê, –ó–ù–ê–ï–®–¨ –¢–ê–ú 1,2,3,4,5,6,7,8,9,0? –ù–ï–¢? –î–ï–ë–ò–õ –ë–õ–Ø–¢–¨")
          return
        }
        err := client.Set(fmt.Sprintf("%d", m.Sender.ID), "project3", 0).Err()
        if err != nil {
          log.Print(err)
          b.Send(m.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
          return
        }
        b.Send(m.Sender, "–¢–µ–ø–µ—Ä—å –ø–∏—à–∏ –±–ª—è—Ç—å —Å–∫–æ–ª—å–∫–æ –≥—Ä–æ—à–µ–π (—Ä—É–±–ª–µ–π) —Ç—ã –∑–∞–ø–ª–∞—Ç–∏—à—å –ø–ª–µ–±—Å—É, –∫–æ—Ç–æ—Ä—ã–π —ç—Ç–æ –≥–æ–≤–Ω–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ—Ç. –î–µ–Ω—å–≥–∏ –º–Ω–µ –ø–ª–∞—Ç–∏ –±–ª—è—Ç—å")
      case "project3":
        projectprice, err = strconv.Atoi(m.Text)
        if err != nil {
          b.Send(m.Sender, "–¢—ã –µ–±–∞–Ω—É—Ç—ã–π –±–ª—è—Ç—å? –ü–∏—à–∏ —Ü–∏—Ñ—Ä—ã –±–ª—è—Ç—å, –¶–ò–§–†–´ –°–£–ö–ê, –ó–ù–ê–ï–®–¨ –¢–ê–ú 1,2,3,4,5,6,7,8,9,0? –ù–ï–¢? –î–ï–ë–ò–õ –ë–õ–Ø–¢–¨")
          return
        }
        tx := db.MustBegin()
        tx.MustExec(`INSERT INTO SEproject(name, description, difficulty, price, paid, progress, worker_id) VALUES ($1, $2, $3, $4, 0, 0, 0)`, projectname, projectdesc, projectdiff, projectprice)
        tx.Commit()
        b.Send(m.Sender, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –¥–æ–ª–±–∞–µ–±, –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –ø—Ä–æ–µ–∫—Ç —Ç–µ–ø–µ—Ä—å –≤ —Å–ø–∏—Å–∫–µ, –∏–¥–∏ –∏—â–∏ –ø–ª–µ–±—Å–æ–≤, —á—Ç–æ–±—ã —ç—Ç–æ–≥–æ –≥–æ–≤–Ω–æ –¥–µ–ª–∞–ª–∏. –î–µ–Ω—å–≥–∏ –º–Ω–µ –ø–ª–∞—Ç–∏ –±–ª—è—Ç—å")
        err := client.Set(fmt.Sprintf("%d", m.Sender.ID), "start", 0).Err()
        if err != nil {
          log.Print(err)
          b.Send(m.Sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–∂–µ")
          return
        }
        return
      default:
        b.Send(m.Sender, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ /start")
    }
	})

	b.Start()
}
