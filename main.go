package main

import (
	"os"
	"log"
	tb "gopkg.in/tucnak/telebot.v2"
)

func main() {
	var (
		port      = os.Getenv("PORT")       // sets automatically
		publicURL = os.Getenv("PUBLIC_URL") // you must add it to your config vars
		token     = os.Getenv("TOKEN")      // you must add it to your config vars
	)

	webhook := &tb.Webhook{
		Listen:   ":" + port,
		Endpoint: &tb.WebhookEndpoint{PublicURL: publicURL},
	}

	pref := tb.Settings{
		Token:  token,
		Poller: webhook,
	}

  // here are buttons defined

  backBtn := tb.InlineButton{
    Unique: "back",
    Text:   "‚Ü©Ô∏è –ù–∞–∑–∞–¥"}

  enterBtn := tb.InlineButton{
    Unique: "enter",
    Text:   "üîë –í–æ–π—Ç–∏ –Ω–∞ –±–∏—Ä–∂—É"}

  qualifyBtn := tb.InlineButton{
    Unique: "qualify",
    Text:   "üßß –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"}

  infoBtn := tb.InlineButton{
    Unique: "info",
    Text:   "üìÉ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏—Ä–∂–µ"}

  howToEnterBtn := tb.InlineButton{
    Unique: "howToEnter",
    Text:   "üóù –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –±–∏—Ä–∂—É?"}

  fuckedUpBtn := tb.InlineButton{
    Unique: "fuckedUp",
    Text:   "üìÜ –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —è –Ω–µ —É–ª–æ–∂—É—Å—å –≤ —Å—Ä–æ–∫?"}

  whatProjectsBtn := tb.InlineButton{
    Unique: "whatProjects",
    Text:   "üìë –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∏—Ä–∂–∞?"}

  // currentProjectBtn := tb.InlineButton{
  //   Unique: "currentProject",
  //   Text:   "üõé –ú–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç"}

  // showOffersBtn := tb.InlineButton{
  //   Unique: "showOffers",
  //   Text:   "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}

  // askAdminBtn := tb.InlineButton{
  //   Unique: "askAdmin",
  //   Text:   "üí° –í–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"}

  // techSuppBtn := tb.InlineButton{
  //   Unique: "techSupp",
  //   Text:   "üì¶ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å"}

  // redeemMilestoneProjectBtn := tb.InlineButton{
  //   Unique: "redeemMilestoneProject",
  //   Text:   "‚úÖ –ó–∞–∫—Ä—ã—Ç—å —ç—Ç–∞–ø/–ø—Ä–æ–µ–∫—Ç"}

  // cancelProjectBtn := tb.InlineButton{
  //   Unique: "cancelProject",
  //   Text:   "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞"}

  // takeProjectBtn := tb.InlineButton{
  //   Unique: "takeProject",
  //   Text:   "‚ùáÔ∏è –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç #1"}

	b, err := tb.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

  b.Handle("/start", func(m *tb.Message) {
    inlineKeys := [][]tb.InlineButton{
      []tb.InlineButton{enterBtn, qualifyBtn},
      []tb.InlineButton{infoBtn}}

    b.Send(
      m.Sender,
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Swift Exchange! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:",
      &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
  })

  b.Handle(&infoBtn, func(c *tb.Callback) {
    b.Respond(c, &tb.CallbackResponse{
        ShowAlert: false,
    })

    inlineKeys := [][]tb.InlineButton{
      []tb.InlineButton{howToEnterBtn},
      []tb.InlineButton{fuckedUpBtn,whatProjectsBtn},
      []tb.InlineButton{backBtn}}

    b.Send(c.Sender, `üìÉ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏—Ä–∂–µ:

Swift Exchange - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

–ú—ã –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è:

üì© –ü–æ–ª–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
üíå –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å –≤ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ
üìÖ –ü–æ–¥–Ω—è—Ç–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞, –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
üìà –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤

–ë–∏—Ä–∂–∞ –∑–∞–±–∏—Ä–∞–µ—Ç 5% —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–∞–±–æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–º. –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ.`,
    &tb.ReplyMarkup{InlineKeyboard: inlineKeys})
  })

	b.Handle("/hello", func(m *tb.Message) {
		b.Send(m.Sender, "Hi!")
	})

	b.Start()
}
